Create Database LBP02
USE LBP02

SELECT *FROM FINANCIAL_LOAN

-- TOTAL LOAN APPLICATIONS
SELECT COUNT(ID) AS TOTAL_LOAN_APPLICATION FROM financial_loan

-- TOTAL FUNDED AMOUNT
SELECT SUM(LOAN_AMOUNT)/1000000 AS 'TOTAL_FUNDED_AMOUNT IN MILLIONS' FROM financial_loan

-- TOTAL PAYMENT RECIEVED
SELECT SUM(TOTAL_PAYMENT)/1000000 AS TOTAL_PAYMENT_RECIEVED_IN_MILLIONS FROM financial_loan

-- AVERAGE INTEREST RATE
SELECT PURPOSE, ROUND(AVG(INT_RATE), 2) AS AVG_INT_RATE FROM financial_loan
GROUP BY PURPOSE

-- AVERAGE DTI
SELECT ROUND(AVG(DTI),2) AS AVG_DTI FROM financial_loan

-- AVERAGE DTI GROUP BY MONTH
SELECT YEAR(ISSUE_DATE) AS 'YEAR',
       MONTH(ISSUE_DATE) AS 'MONTH',
	   ROUND(AVG(DTI),2) AS 'MONTHLY_AVG_DTI'
FROM financial_loan
WHERE 
      YEAR(ISSUE_DATE) = 2021
GROUP BY
      YEAR(ISSUE_DATE),
	  MONTH(ISSUE_DATE)
ORDER BY
      MONTH


--GOOD LOAN VS BAD LOAN:

-- GOOD LOAN APPLICATION % 
SELECT COUNT(CASE WHEN LOAN_STATUS = 'FULLY PAID' OR LOAN_STATUS = 'CURRENT' THEN ID END)*100 /COUNT(ID) AS GOOD_LOAN_APPLICATION_PERCENTAGE
FROM financial_loan

-- GOOD LOAN APPLICATION
SELECT COUNT(CASE WHEN LOAN_STATUS IN('FULLY PAID' , 'CURRENT') THEN ID END) AS GOOD_LOAN_APPLICATION , COUNT(ID) AS TOTAL_APPLICATION
FROM financial_loan

-- GOOD APPLICATION AMOUNT RECORDED
SELECT CONCAT(CAST(SUM(TOTAL_PAYMENT)/1000000 AS DECIMAL (18,2)), ' ', 'millions') AS GOOD_LOAN_AMOUNT 
FROM FINANCIAL_LOAN
WHERE LOAN_STATUS IN ('FULLY PAID' , 'CURRENT')

-- BAD LOAN APPLICATION % 
SELECT COUNT(CASE WHEN LOAN_STATUS = 'CHARGED OFF' THEN ID END)*100 /COUNT(ID) AS BAD_LOAN_APPLICATION_PERCENTAGE
FROM financial_loan

-- BAD LOAN APPLICATION
SELECT COUNT(CASE WHEN LOAN_STATUS = 'CHARGED OFF' THEN ID END) AS BAD_LOAN_APPLICATION , COUNT(ID) AS TOTAL_APPLICATION
FROM financial_loan

-- BAD APPLICATION AMOUNT RECORDED
SELECT CONCAT(CAST(SUM(TOTAL_PAYMENT)/1000000 AS DECIMAL (18,2)), ' ', 'millions') AS BAD_LOAN_AMOUNT 
FROM FINANCIAL_LOAN
WHERE LOAN_STATUS = 'CHARGED OFF'

WITH MONTHLYTOTALS AS (
     SELECT
	    YEAR(ISSUE_DATE) AS 'YEAR',
		MONTH(ISSUE_DATE) AS 'MONTH',
		SUM(TOTAL_PAYMENT) AS 'MONTHLY_TOTAL_PAYMENTS_RECIEVED'
     FROM 
	   financial_loan
	GROUP BY
	    YEAR(ISSUE_DATE),
		MONTH(ISSUE_DATE)),

MONTHOVERMONTH AS (
     SELECT 
	     T1.YEAR,
		 T1.MONTH,
		 T1.MONTHLY_TOTAL_PAYMENTS_RECIEVED AS 'CURRENT_MONTH_PAYMENT',
		 T2.MONTHLY_TOTAL_PAYMENTS_RECIEVED AS 'PREVIOUS_MONTH_PAYMENT',
         T1.MONTHLY_TOTAL_PAYMENTS_RECIEVED -  T2.MONTHLY_TOTAL_PAYMENTS_RECIEVED AS 'MONTH_OVER_MONTH'
   FROM  MONTHLYTOTALS T1
   LEFT JOIN MONTHLYTOTALS T2 ON T1.YEAR = T2.YEAR AND T1.MONTH = T2.MONTH + 1


)
    SELECT 
	    YEAR,
		MONTH,
		CURRENT_MONTH_PAYMENT,
		PREVIOUS_MONTH_PAYMENT,
		MONTH_OVER_MONTH
     FROM
	    MONTHOVERMONTH
     ORDER BY
	    YEAR,
		MONTH
     

WITH MONTHLYINTRATES AS (
     SELECT
	    YEAR(ISSUE_DATE) AS 'YEAR',
		MONTH(ISSUE_DATE) AS 'MONTH',
        ROUND(AVG(INT_RATE)*100,2) AS 'AVERAGE_INTEREST_RATE'
     FROM 
	   financial_loan
	GROUP BY
	    YEAR(ISSUE_DATE),
		MONTH(ISSUE_DATE)),

MONTHOVERMONTHINTRATES AS(
     SELECT 
	     M1.YEAR,
		 M1.MONTH,
		 M1.AVERAGE_INTEREST_RATE AS 'CURRENT_MONTH_INTEREST',
		 M2.AVERAGE_INTEREST_RATE AS 'PREVIOUS_MONTH_INTEREST',
         ROUND((M1.AVERAGE_INTEREST_RATE -  M2.AVERAGE_INTEREST_RATE),2) AS 'MONTH_OVER_MONTH_INTERST_RATE'
   FROM  MONTHLYINTRATES M1
   LEFT JOIN MONTHLYINTRATES M2 ON M1.YEAR = M2.YEAR AND M1.MONTH = M2.MONTH + 1


)
    SELECT 
	    YEAR,
		MONTH,
		CURRENT_MONTH_INTEREST,
		PREVIOUS_MONTH_INTEREST,
		MONTH_OVER_MONTH_INTERST_RATE
     FROM
	   
MONTHOVERMONTHINTRATES
     ORDER BY
	    YEAR,
		MONTH